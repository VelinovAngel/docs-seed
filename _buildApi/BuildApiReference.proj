<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="BuildApiReference" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask TaskName="MSBuild.Community.Tasks.FileUpdate" AssemblyFile="Tools\MSBuildCommunityTasks\MSBuild.Community.Tasks.dll" />

<UsingTask TaskName="ReplaceAndLowerUrls" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
  <ParameterGroup>
    <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
  </ParameterGroup>
  <Task>
    <Using Namespace="System.Text.RegularExpressions"/>
    <Using Namespace="System.IO"/>
    <Code Type="Fragment" Language="cs">
        <![CDATA[
              for (int i = 0; i < this.Files.Length; i++)
              {
                ITaskItem item = this.Files[i];
                string path = item.GetMetadata("FullPath");
                string text = File.ReadAllText(path);
                text = Regex.Replace(
                          text,
                          "href=\"(?!http(s)?:)([^\"]+)\\.html([?#][^\"]*)?\"",
                          m => "href=\"" + m.Groups[2].Value.ToLower() + m.Groups[3].Value + "\"",
                          RegexOptions.Singleline | RegexOptions.IgnoreCase);
                File.WriteAllText(path, text);
                this.Log.LogMessage(MessageImportance.Normal, string.Format("Updated urls in file '{0}'", path));
              }
        ]]>
    </Code>
  </Task>
</UsingTask>
<UsingTask TaskName="ReplaceAndLowerSitemapUrls" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
  <ParameterGroup>
    <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
  </ParameterGroup>
  <Task>
    <Using Namespace="System.Text.RegularExpressions"/>
    <Using Namespace="System.IO"/>
    <Code Type="Fragment" Language="cs">
        <![CDATA[
              for (int i = 0; i < this.Files.Length; i++)
              {
                ITaskItem item = this.Files[i];
                string path = item.GetMetadata("FullPath");
                string text = File.ReadAllText(path);
                text = Regex.Replace(
                          text,
                          "<loc>([^<]+\\.html)</loc>",
                          m => "<loc>" + m.Groups[1].Value.ToLower() + "</loc>",
                          RegexOptions.Singleline | RegexOptions.IgnoreCase);
                File.WriteAllText(path, text);
                this.Log.LogMessage(MessageImportance.Normal, string.Format("Updated sitemap urls in file '{0}'", path));
              }
        ]]>
    </Code>
  </Task>
</UsingTask>

  <PropertyGroup>
    <BuildApiReferenceDependsOn>
      CheckRequiredProperties;
      PrepareProperties;
      InitializeBinariesFiles;
      CopyLatestBinaries;
      CopyAssetsAPIFiles;
      CreateDocfxJson;
      RestoreNugetAPISolution;
      BuildAPISolution;
      ProcessSitemap;
      ProcessHtmlFiles;
      DeleteDocFxFavicon;
      CopyAPIHtmlFilesToSiteFolder
    </BuildApiReferenceDependsOn>
  </PropertyGroup>

  <Target Name="BuildApiReference" DependsOnTargets="$(BuildApiReferenceDependsOn)"/>

  <Target Name="CheckRequiredProperties">

    <Error Condition=" '$(LatestBinariesPath)' == '' " Text="LatestBinariesPath is not defined (Ex. \\telerik.com\distributions\OfficialReleases\XAML\2018_R3\2018_R3_Official)"/>
    <Error Condition=" '$(DocsRepoName)' == '' " Text="DocsRepoName is not defined (Ex. winforms-docs)"/>
    <Error Condition=" '$(DocumentationBaseUrl)' == '' " Text="DocumentationBaseUrl is not defined (Ex. https://docs.telerik.com/devtools/document-processing)"/>
    <Error Condition=" '$(DocsRepoApiAssetsFolder)' == '' " Text="DocsRepoApiAssetsFolder is not defined (Ex. _assetsApi)"/>

    <Message Text="DEBUG INFO: LatestBinariesPath -> $(LatestBinariesPath)" />
    <Message Text="DEBUG INFO: DocsRepoName -> $(DocsRepoName)" />
    <Message Text="DEBUG INFO: DocumentationBaseUrl -> $(DocumentationBaseUrl)" />
    <Message Text="DEBUG INFO: DocsRepoApiAssetsFolder -> $(DocsRepoApiAssetsFolder)" />

  </Target>

  <Target Name="PrepareProperties">
    <PropertyGroup>

      <!--Tools-->
      <ToolsFolder>$(MsBuildProjectDirectory)\Tools</ToolsFolder>
      <NugetTool>$(ToolsFolder)\Nuget.exe</NugetTool>

      <!--Folder properties-->
      <BuildApiRootFolder>$(MsBuildProjectDirectory)\BuildAPI</BuildApiRootFolder>
      <BuildApiSrcFolder>$(BuildApiRootFolder)\src</BuildApiSrcFolder>
      <SourceFolder>$([System.IO.Path]::GetFullPath('$(MSBuildProjectDirectory)\..\..'))</SourceFolder>
      <DocsSeedRoot>$([System.IO.Path]::GetFullPath('$(BuildApiRootFolder)'))\..\..\</DocsSeedRoot>
      <FavIconPath>$(DocsSeedRoot)\favicon.ico</FavIconPath>
      <DocsRepoName Condition="'$(DocsRepoName)' == '' ">Xamarin-Forms-docs</DocsRepoName>
      <DocsFolder>$(SourceFolder)\$(DocsRepoName)</DocsFolder>
      <DocsRepoApiAssetsFolder Condition="'$(DocsRepoApiAssetsFolder)' == '' ">_assets</DocsRepoApiAssetsFolder>
      <DocsAssets>$(DocsFolder)\$(DocsRepoApiAssetsFolder)</DocsAssets>
      <LatestBinariesFile>$(DocsAssets)\Binaries.txt</LatestBinariesFile>
      <TopNavigationHtmlSource>$(DocsFolder)\_includes\top-nav.html</TopNavigationHtmlSource>
      <TopNavigationHtmlDestination>$(BuildApiRootFolder)\docfx-tmpl\src\partials\navbar.tmpl.partial</TopNavigationHtmlDestination>

      <!--Docfx properties-->
      <DocfxJsonGeneratorPath>$(ToolsFolder)\GenerateDocFxJsonTool\DocFxJsonModifier.exe</DocfxJsonGeneratorPath>
      <DocfxFile>$(MsBuildProjectDirectory)\docfx.json</DocfxFile>
      <FilterApi Condition=" '$(HasApiFilter)' == 'true' ">true</FilterApi>
      <SiteOutputFolder Condition=" '$(SiteOutputFolder)' == '' ">_site</SiteOutputFolder>

      <!--Build Api solution-->
      <BuildApiSolutionName>$(MsBuildProjectDirectory)\BuildAPI.sln</BuildApiSolutionName>

      <!--Output properties-->
      <OutputFolder>$(BuildApiRootFolder)\_site</OutputFolder>
      <SitemapFile>$(OutputFolder)\sitemap.xml</SitemapFile>
      <ApiOutputFolder>$(OutputFolder)\api</ApiOutputFolder>
      <ApiStylesOutputFolder>$(OutputFolder)\styles</ApiStylesOutputFolder>
      <DocsRepoOutputFolder>$(DocsFolder)\$(SiteOutputFolder)</DocsRepoOutputFolder>

      <!--Build Configurations-->
      <BuildConfiguration>Release</BuildConfiguration>
      <BuildPlatform>Any CPU</BuildPlatform>

    </PropertyGroup>
  </Target>

  <Target Name="InitializeBinariesFiles">

    <ReadLinesFromFile Condition="Exists('$(LatestBinariesFile)')"
            File="$(LatestBinariesFile)" >
      <Output
          TaskParameter="Lines"
          ItemName="BinariesNames"/>
    </ReadLinesFromFile>

    <ItemGroup Condition="Exists('$(LatestBinariesFile)')">
      <Binaries Include="$(LatestBinariesPath)\**\%(BinariesNames.Identity)"/>
    </ItemGroup>

    <ItemGroup Condition="!Exists('$(LatestBinariesFile)')">
      <Binaries Include="$(LatestBinariesPath)\*.dll;
                         $(LatestBinariesPath)\*.xml"/>
    </ItemGroup>

  </Target>

  <Target Name="CopyLatestBinaries">

    <Copy SourceFiles="%(Binaries.FullPath)" DestinationFiles="@(Binaries->'$(BuildApiSrcFolder)\%(RecursiveDir)%(Filename)%(Extension)')" />

  </Target>

  <Target Name="CopyAssetsAPIFiles">

    <Copy SourceFiles="$(TopNavigationHtmlSource)" DestinationFiles="$(TopNavigationHtmlDestination)" />

    <ItemGroup>
      <DocsAssets Include="$(DocsAssets)\**\*.*"/>
    </ItemGroup>

    <Message Text="DEBUG INFO: DocsAssets=$(DocsAssets)" />

    <Copy SourceFiles="@(DocsAssets)" DestinationFolder="$(BuildApiRootFolder)\%(RecursiveDir)" />

  </Target>

  <Target Name="CreateDocfxJson">

    <Message Text="DEBUG INFO: FilterApi=$(FilterApi)" />

    <Exec Command='$(DocfxJsonGeneratorPath) $(DocumentationBaseUrl) $(FilterApi)'></Exec>

    <Copy SourceFiles='$(DocfxFile)' DestinationFolder='$(BuildApiRootFolder)' />

  </Target>

  <Target Name="RestoreNugetAPISolution">

    <Exec Command="$(NugetTool) restore $(BuildApiSolutionName)" />

  </Target>

  <Target Name="BuildAPISolution">

    <MSBuild Projects="$(BuildApiSolutionName)" Properties="Configuration=$(BuildConfiguration);Platform=$(BuildPlatform)" Targets="Rebuild" />

  </Target>

  <Target Name="ProcessSitemap">

    <Message Text="DEBUG INFO: SitemapFile=$(SitemapFile)" />

    <FileUpdate Files="$(SitemapFile)" Regex="(&lt;lastmod&gt;)(\d{4}-\d{2}-\d{2})(.*?)(&lt;\/lastmod&gt;)" ReplacementText="$1$2$4" />
    <ReplaceAndLowerSitemapUrls Files="$(SitemapFile)" />

    <Copy SourceFiles='$(SitemapFile)' DestinationFolder='$(ApiOutputFolder)' />

  </Target>

  <Target Name="ProcessHtmlFiles">
    <ItemGroup>
      <HtmlApiFiles Include="$(ApiOutputFolder)\*.html" />
    </ItemGroup>
    <ReplaceAndLowerUrls Files="@(HtmlApiFiles)" />
  </Target>

  <Target Name="CopyAPIHtmlFilesToSiteFolder">

    <ItemGroup>
      <ApiFiles Include="$(ApiOutputFolder)\*.*" />
      <ApiStyleFiles Include="$(ApiStylesOutputFolder)\*.*" />
    </ItemGroup>

    <Copy SourceFiles='@(ApiFiles)' DestinationFolder='$(DocsRepoOutputFolder)\api' />
    <Copy SourceFiles='@(ApiStyleFiles)' DestinationFolder='$(DocsRepoOutputFolder)\styles' />

  </Target>
  
  <Target Name="DeleteDocFxFavicon">
    <Delete Files="$(BuildApiRootFolder)\_site\favicon.ico" />
    <Copy SourceFiles="$(FavIconPath)" DestinationFolder="$(BuildApiRootFolder)\_site\" />
    <Copy SourceFiles="$(FavIconPath)" DestinationFolder="$(DocsRepoOutputFolder)" />
  </Target>

</Project>
